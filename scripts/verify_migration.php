<?php

/**
 * Script de verifica√ß√£o p√≥s-migration e seeders
 * Execute: php scripts/verify_migration.php
 */

require __DIR__ . '/../vendor/autoload.php';

$app = require_once __DIR__ . '/../bootstrap/app.php';
$app->make('Illuminate\Contracts\Console\Kernel')->bootstrap();

use Spatie\Permission\Models\Role;
use Spatie\Permission\Models\Permission;

echo "üîç Verificando migrations e seeders aplicados...\n\n";

// Verificar se as colunas existem
$hasColumns = [
    'primary_professional' => Schema::hasColumn('kids', 'primary_professional'),
    'months' => Schema::hasColumn('kids', 'months'),
];

foreach ($hasColumns as $column => $exists) {
    echo ($exists ? '‚úÖ' : '‚ùå') . " Coluna '$column': " . ($exists ? 'EXISTS' : 'MISSING') . "\n";
}

// Verificar Roles e Permissions (CR√çTICO)
echo "\nüîë Verificando Roles e Permissions:\n";
$expectedRoles = ['superadmin', 'admin', 'professional', 'pais'];
foreach ($expectedRoles as $roleName) {
    $exists = Role::where('name', $roleName)->exists();
    echo ($exists ? '‚úÖ' : '‚ùå') . " Role '$roleName': " . ($exists ? 'EXISTS' : 'MISSING') . "\n";
}

$permissionCount = Permission::count();
echo "üìã Total de Permissions: $permissionCount\n";

// Verificar Especialidades (CR√çTICO)
echo "\nüè• Especialidades:\n";
$specialtyCount = \App\Models\Specialty::count();
echo ($specialtyCount > 0 ? '‚úÖ' : '‚ùå') . " Specialties: $specialtyCount\n";

// Verificar Dom√≠nios e Compet√™ncias (CR√çTICO)
echo "\nüß† Sistema de Avalia√ß√£o:\n";
$domainCount = \App\Models\Domain::count();
$levelCount = \App\Models\Level::count();
$competenceCount = \App\Models\Competence::count();

echo ($domainCount > 0 ? '‚úÖ' : '‚ùå') . " Domains: $domainCount\n";
echo ($levelCount > 0 ? '‚úÖ' : '‚ùå') . " Levels: $levelCount\n";
echo ($competenceCount > 0 ? '‚úÖ' : '‚ùå') . " Competences: $competenceCount\n";

// Verificar contagem de registros
$counts = [
    'users' => App\Models\User::count(),
    'kids' => App\Models\Kid::count(),
    'professionals' => App\Models\Professional::count(),
    'responsibles' => \App\Models\Responsible::count(),
];

echo "\nüìä Contagem de registros:\n";
foreach ($counts as $table => $count) {
    echo "   $table: $count\n";
}

// Verificar se algum kid tem months NULL
$kidsWithoutMonths = App\Models\Kid::whereNull('months')->count();
echo "\nüë∂ Kids sem campo 'months': $kidsWithoutMonths\n";

// Verificar foreign keys
try {
    $kidsWithProfessional = App\Models\Kid::whereNotNull('primary_professional')->count();
    echo "üë®‚Äç‚öïÔ∏è Kids com profissional prim√°rio: $kidsWithProfessional\n";
} catch (Exception $e) {
    echo "‚ùå Erro ao verificar foreign key: " . $e->getMessage() . "\n";
}

// Verificar se sistema est√° funcional
echo "\nüéØ Status do Sistema:\n";
$criticalOk = $domainCount > 0 && $levelCount > 0 && $competenceCount > 0 && $permissionCount > 0;
echo ($criticalOk ? '‚úÖ SISTEMA FUNCIONAL' : '‚ùå SISTEMA COM PROBLEMAS') . "\n";

echo "\n‚úÖ Verifica√ß√£o conclu√≠da!\n";