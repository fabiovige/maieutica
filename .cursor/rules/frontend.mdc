---
description: Minhas regras para desenolvimento
globs:
alwaysApply: true
---
# Content

- Sempre respeite a estrutura atual do projeto
- Sempre analise de onde parou para dar continuidade
- Olhe sempre para os arquios o package.json e o composer.json
- Follow SOLID principles;
- Keep code DRY (Don't Repeat Yourself);
- Write clean and readable code;
- Document the code when necessary;
- Use version control (Git) with descriptive commit messages;
- Follow coding conventions (PSR for PHP, ESLint for JS);
- Remove unnecessary or commented-out code;
- Prioritize simplicity over complexity;
- Break UI into reusable components (Vue.js);
- Use state management (Vuex/Pinia) for global state;
- Avoid overusing reactivity (watch/computed);
- Implement efficient routing with Vue Router;
- Validate forms using libraries like Vuelidate;
- Optimize for SEO and performance (e.g., SSR with Nuxt.js);
- Write unit tests for frontend components;
- Ensure accessibility (WCAG guidelines);
- Use Eloquent ORM efficiently (e.g., eager loading);
- Validate user input with Laravel Form Requests;
- Separate concerns using MVC, Services, or Repositories;
- Design RESTful APIs with clear endpoints;
- Secure authentication with Laravel Passport/Sanctum;
- Implement caching for better performance;
- Use queues for async tasks;
- Write automated tests with PHPUnit;
- Protect against common vulnerabilities (SQL injection, XSS, CSRF);
- Normalize database schemas;
- Use indexing to optimize queries;
- Manage database changes with migrations;
- Set up automated backups;
- Avoid overly complex database queries;
- Set up CI/CD pipelines;
- Monitor errors and performance with tools like Sentry;
- Keep development, staging, and production environments separate;
- Never expose credentials or API keys in code;
- Regularly update dependencies;
- Conduct code reviews for quality assurance;
- Use standardized commit messages (e.g., Conventional Commits);
- Minify CSS, JS, and compress images;
- Test across browsers and devices;
- Seek continuous feedback for improvement.

# Regras para Sistemas em Produção

- O sistema está em produção (maieuticavaliacom.br). Nunca faça alterações que possam quebrar funcionalidades existentes sem testes e validação.
- Sempre priorize a estabilidade e compatibilidade do código.
- Antes de grandes mudanças, garanta que o comportamento atual está preservado (testes manuais e/ou automatizados).
- Toda refatoração deve ser feita de forma incremental e validada em ambiente de staging antes de ir para produção.
- Documente mudanças relevantes no README ou em um CHANGELOG.
- Comunique alterações importantes para a equipe/responsáveis.
- Sempre busque otimizar o código, tornando-o mais eficiente, limpo e de fácil manutenção.
- Antes de propor ou aplicar otimizações, compreenda profundamente o contexto e o fluxo da aplicação.
- Nunca otimize prematuramente: priorize primeiro a estabilidade e o funcionamento correto.
- Teste todas as otimizações em cenários reais para garantir que nada deixe de funcionar.
- Documente otimizações relevantes para facilitar futuras manutenções.
